import { useState } from "react";
import Head from "next/head";
import {
  Container,
  TextField,
  Button,
  Typography,
  Box,
  Alert,
} from "@mui/material";
import Layout from "../components/Layout";
import { Inter } from "next/font/google";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  // 認証設定start
  const [id, setId] = useState("");
  const [password, setPassword] = useState("");
  const [authenticated, setAuthenticated] = useState(false);
  const [error, setError] = useState("");
  const handleSubmit = async (event) => {
    event.preventDefault();
    const res = await fetch("/api/auth", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: id, password: password }),
    });
    const data = await res.json();
    setAuthenticated(data.authenticated);
    if (data.authenticated) {
      setAuthenticated(true);
    } else if (res.status == 403) {
      setError("IPアドレス制限がかかっています");
    } else {
      setError("IDまたはパスワードが間違っています。");
    }
  };

  // 認証保護する内容
  if (authenticated) {
    return (
      <>
        <Head>
          <title>Document GPT</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        {/* <main className={`${styles.main} ${inter.className}`}> */}
        <main>
          <Layout />
        </main>
      </>
    );
  }
  // 認証設定end

  // 認証用のフォーム
  return (
    <Box
      display="flex"
      flexDirection="column"
      justifyContent="center"
      minHeight="100vh"
    >
      <Container component="main" maxWidth="xs">
        <Typography component="h1" variant="h5" align="center">
          Document GPT ログイン
        </Typography>
        <form onSubmit={handleSubmit} noValidate>
          <TextField
            variant="outlined"
            margin="normal"
            required
            fullWidth
            id="id"
            label="ID"
            name="id"
            autoComplete="id"
            autoFocus
            value={id}
            onChange={(e) => setId(e.target.value)}
          />
          <TextField
            variant="outlined"
            margin="normal"
            required
            fullWidth
            name="password"
            label="パスワード"
            type="password"
            id="password"
            autoComplete="current-password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          {error && <Alert severity="error">{error}</Alert>}{" "}
          {/* エラーメッセージを表示 */}
          <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2 }}
          >
            ログイン
          </Button>
        </form>
      </Container>
    </Box>
  );
}
